{"version":3,"sources":["assets/pokedex.png","reducers/pokemon.js","reducers/index.js","store.js","components/home.js","components/card-grid.js","components/modal-pokemon.js","components/loading.js","actions/pokemon.js","containers/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","pokemons","status","currentPokemon","offset","Reducers","combineReducers","pokemon","state","action","type","payload","results","next","Object","assign","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","CenteredDiv","styled","div","StyledImage","img","MaxWidthDiv","CardGrid","handlePokemonClick","Grid","container","spacing","map","index","name","url","pokemonNumber","item","xs","key","onClick","StyledCard","StyledCardContent","Box","display","justifyContent","Typography","toUpperCase","Card","CardContent","BigAvatar","ModalPokemon","handleClose","order","sprites","Dialog","onClose","open","frontDefault","front_default","DialogTitle","alt","src","Loading","m","p","CircularProgress","fetchPokemonsRequest","fetchPokemonsSuccess","response","fetchPokemonsFailure","fetchPokemonRequest","fetchPokemonSuccess","Home","connect","fetchPokemons","prevPressed","dispatch","apiEndpoint","URL","args","URLSearchParams","search","parseInt","get","set","toString","fetch","then","json","catch","err","fetchPokemon","clearCurrentPokemon","useEffect","handleModalDismiss","variant","component","gutterBottom","pokedexLogo","Button","color","App","store","Store","rel","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6516394e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokedex.c31fa44f.png\";","const initialState = {\n  pokemons: null,\n  status: null,\n  currentPokemon: null,\n  offset: 0\n}\nexport const pokemonReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'POKEMONS_FETCH_REQUEST':\n      return {\n        status: 'loading'\n      }\n    case 'POKEMONS_FETCH_SUCCESS': {\n      const { results, next, offset } = action.payload\n      return {\n        pokemons: results,\n        next,\n        status: 'done',\n        offset\n      }\n    }\n\n    case 'POKEMONS_FETCH_FAILURE':\n      return {\n        status: 'error'\n      }\n    case 'POKEMON_FETCH_REQUEST':\n      return {\n        ...state,\n        currentPokemon: { status: 'loading' }\n      }\n    case 'POKEMON_FETCH_SUCCESS':\n      return {\n        ...state,\n        currentPokemon: Object.assign({ status: 'done' }, action.payload)\n      }\n    case 'POKEMON_FETCH_FAILURE':\n      return {\n        ...state,\n        currentPokemon: { status: 'error' }\n      }\n    case 'POKEMON_CURRENT_CLEAR':\n      return {\n        ...state,\n        currentPokemon: null\n      }\n    default:\n      return state\n  }\n}\n","import { pokemonReducer } from './pokemon'\nimport { combineReducers } from 'redux'\nexport const Reducers = combineReducers({\n  pokemon: pokemonReducer\n})\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { Reducers } from './reducers'\nimport thunk from 'redux-thunk'\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport default createStore(Reducers, composeEnhancer(applyMiddleware(thunk)))\n","import React, { useEffect } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\nimport PropTypes from 'prop-types'\nimport { CardGrid, ModalPokemon, Loading } from '.'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Button from '@material-ui/core/Button'\nimport pokedexLogo from '../assets/pokedex.png'\nimport styled from 'styled-components'\n\nexport const Home = ({\n  pokemon,\n  fetchPokemons,\n  fetchPokemon,\n  clearCurrentPokemon\n}) => {\n  const { pokemons, next, status, offset, currentPokemon } = pokemon\n  useEffect(() => {\n    if (!status) {\n      fetchPokemons()\n    }\n  }, [])\n  const handlePokemonClick = url => fetchPokemon(url)\n  const handleModalDismiss = () => clearCurrentPokemon()\n  const renderCardContainer = () => (\n    <CenteredDiv>\n      <MaxWidthDiv>\n        <CardContent>\n          <CenteredDiv>\n            <StyledImage src={pokedexLogo} />\n          </CenteredDiv>\n          <CardGrid\n            pokemons={pokemons}\n            offset={parseInt(offset)}\n            handlePokemonClick={handlePokemonClick}\n          />\n          <Box display=\"flex\" justifyContent=\"center\" m={1} p={1}>\n            <Box p={1}>\n              {!!offset && (\n                <Button\n                  onClick={() => fetchPokemons(next, true)}\n                  variant=\"contained\"\n                  color=\"primary\"\n                >\n                  Previous\n                </Button>\n              )}\n            </Box>\n            <Box p={1}>\n              <Button onClick={() => fetchPokemons(next)} variant=\"contained\" color=\"primary\">\n                Next\n              </Button>\n            </Box>\n          </Box>\n        </CardContent>\n      </MaxWidthDiv>\n      <ModalPokemon\n        handleClose={handleModalDismiss}\n        currentPokemon={currentPokemon}\n      />\n    </CenteredDiv>\n  )\n\n  const renderError = () => (\n    <Box display=\"flex\" justifyContent=\"center\" m={1} p={1}>\n      <Typography variant=\"h4\" component=\"h4\" gutterBottom>\n        Ooops, algo deu errado.\n      </Typography>\n    </Box>\n  )\n  if (!status || status === 'loading') return <Loading />\n  if (status === 'error') return renderError()\n\n  return renderCardContainer()\n}\n\nconst CenteredDiv = styled.div`\n  display: flex;\n  justify-content: center;\n`\nconst StyledImage = styled.img`\n  width: 600px;\n  height: 200px;\n`\nconst MaxWidthDiv = styled.div`\n  max-width: 1280px;\n`\n\nHome.propTypes = {\n  status: PropTypes.string,\n  fetchPokemons: PropTypes.func,\n  fetchPokemon: PropTypes.func,\n  pokemons: PropTypes.arrayOf(Object),\n  pokemon: PropTypes.object\n}\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport PropTypes from 'prop-types'\nimport Box from '@material-ui/core/Box'\nimport styled from 'styled-components'\n\nexport const CardGrid = ({ pokemons, offset, handlePokemonClick }) => (\n  <Grid container spacing={3}>\n    {pokemons.map(({ name, url }, index) => {\n      const pokemonNumber = offset ? offset + index + 1 : index + 1\n      return (\n        <Grid item xs={2} key={name} onClick={() => handlePokemonClick(url)}>\n          <StyledCard>\n            <StyledCardContent>\n              <Box display=\"flex\" justifyContent=\"center\">\n                <Typography>\n                    #{pokemonNumber} {name.toUpperCase()}\n                </Typography>\n              </Box>\n            </StyledCardContent>\n          </StyledCard>\n        </Grid>\n      )\n    })}\n  </Grid>\n)\nconst StyledCard = styled(Card)`\n    transition: all 0.1s ease-out !important;\n     &:hover  {\n      transform: scale(1.15); \n      border: 1px solid blue\n  }\n  cursor: pointer;\n`\nconst StyledCardContent = styled(CardContent)`\n  padding-bottom: 16px !important;\n`\nCardGrid.propTypes = {\n  pokemons: PropTypes.arrayOf(Object),\n  offset: PropTypes.number,\n  handlePokemonClick: PropTypes.func\n}\n","import React from 'react'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\nimport { Loading } from '.'\r\n\r\nconst BigAvatar = styled.img`\r\n    width : 200px;\r\n    height: 200px;\r\n`\r\n\r\nexport const ModalPokemon = ({ currentPokemon, handleClose }) => {\r\n  if (!currentPokemon) return null\r\n  const { order, name, sprites, status } = currentPokemon\r\n  const renderLoadingDialog = () => <Dialog\r\n    onClose={handleClose}\r\n    open={!!currentPokemon}\r\n  >\r\n    <Loading />\r\n  </Dialog>\r\n  if (status === 'loading') return renderLoadingDialog()\r\n\r\n  const { front_default: frontDefault } = sprites\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      open={!!currentPokemon}\r\n    >\r\n\r\n      <DialogTitle >{`#${order} ${name.toUpperCase()}`}</DialogTitle>\r\n      <BigAvatar alt={name} src={frontDefault} />\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nModalPokemon.propTypes = {\r\n  currentPokemon: PropTypes.object,\r\n  handleClose: PropTypes.func\r\n}\r\n","import React from 'react'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Box from '@material-ui/core/Box'\r\n\r\nexport const Loading = () => (\r\n  <Box display=\"flex\" justifyContent=\"center\" m={1} p={1}>\r\n    <CircularProgress />\r\n  </Box>\r\n)\r\n","export const fetchPokemons = (next, prevPressed) => dispatch => {\n  dispatch(fetchPokemonsRequest())\n  let apiEndpoint = next || 'https://pokeapi.co/api/v2/pokemon/'\n  let offset\n  if (next) {\n    const url = new URL(apiEndpoint)\n    const args = new URLSearchParams(url.search)\n    offset = parseInt(args.get('offset'))\n    if (prevPressed) {\n      offset = offset == 20 ? 0 : offset - 40\n      args.set('offset', offset)\n      apiEndpoint = `https://pokeapi.co/api/v2/pokemon/?${args.toString()}`\n    }\n  }\n  return fetch(apiEndpoint)\n    .then(response => response.json())\n    .then(({ results, next }) =>\n      dispatch(fetchPokemonsSuccess({ results, next, offset }))\n    )\n    .catch(err => dispatch(fetchPokemonsFailure(err)))\n}\n\nexport const fetchPokemon = url => dispatch => {\n  dispatch(fetchPokemonRequest())\n  const apiEndpoint = url\n  return fetch(apiEndpoint)\n    .then(\n      response => response.json(),\n      err => dispatch(fetchPokemonsFailure(err))\n    )\n    .then(pokemon => dispatch(fetchPokemonSuccess(pokemon)))\n}\n\nexport const fetchPokemonsRequest = () => ({\n  type: 'POKEMONS_FETCH_REQUEST'\n})\n\nexport const fetchPokemonsSuccess = response => ({\n  type: 'POKEMONS_FETCH_SUCCESS',\n  payload: response\n})\nexport const fetchPokemonsFailure = () => ({\n  type: 'POKEMONS_FETCH_FAILURE'\n})\n\nexport const fetchPokemonRequest = () => ({\n  type: 'POKEMON_FETCH_REQUEST'\n})\n\nexport const fetchPokemonSuccess = pokemon => ({\n  type: 'POKEMON_FETCH_SUCCESS',\n  payload: pokemon\n})\nexport const fetchPokemonFailure = () => ({\n  type: 'POKEMON_FETCH_FAILURE'\n})\nexport const clearCurrentPokemon = () => ({\n  type: 'POKEMON_CURRENT_CLEAR'\n})\n","import { connect } from 'react-redux'\nimport { Home as HomeComponent } from '../components'\nimport { fetchPokemons, fetchPokemon, clearCurrentPokemon } from '../actions'\n\nconst mapStateToProps = ({ pokemon }) => ({\n  pokemon\n})\n\nexport const Home = connect(mapStateToProps, { fetchPokemons, fetchPokemon, clearCurrentPokemon }\n)(HomeComponent)\n","import React from 'react'\nimport Store from './store'\nimport { Provider } from 'react-redux'\nimport { Home } from './containers'\nexport const App = () => (\n  <Provider store={Store}>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n    <Home />\n  </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}